################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   episodic birth-death model
#
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

### Read in the "observed" tree
T <- readTrees("data/primates_tree.nex")[1]

# Get some useful variables from the data. We need these later on.
taxa <- T.taxa()


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

NUM_INTERVALS = 100

H <- 0.587405

####################
# Create the rates #
####################

SD = abs( H / NUM_INTERVALS )


# first we create the standard deviation of the rates between intervals
#speciation_sd ~ dnExponential( 1.0 / SD)
#extinction_sd ~ dnExponential( 1.0 / SD)
#speciation_sd <- H
#extinction_sd <- H

#moves.append( mvScale(speciation_sd,weight=5.0) )
#moves.append( mvScale(extinction_sd,weight=5.0) )

event_prior        = dnPoisson( 2 )
interval_prior     = dnUniform(0,T.rootAge()*0.9)
speciation_prior   = dnLoguniform( 1E-4, 1E2 )
extinction_prior   = dnLoguniform( 1E-4, 1E2 )

events ~ dnMultiValueEvent( event_prior, [interval_prior, speciation_prior, extinction_prior], names=["time", "speciation", "extinction"], min=[0,1,1] )
speciation       := events.getRealPosValues("speciation")
extinction       := events.getRealPosValues("extinction")
interval_times   := events.getRealPosValues("time")
num_events       := events.getNumberOfEvents()

moves.append( mvMultiValueEventBirthDeath(events, weight=50) )
moves.append( mvMultiValueEventScale( events, "speciation", lambda=1, tune=false, weight=20) )
moves.append( mvMultiValueEventScale( events, "extinction", lambda=1, tune=false, weight=20) )
moves.append( mvMultiValueEventSlide( events, "time", lambda=1.0, tune=false, weight=20) )




### rho is the probability of sampling species at the present
### fix this to 233/367, since there are ~367 described species of primates
### and we have sampled 233
rho <- T.ntips()/367

timetree ~ dnEpisodicBirthDeath(rootAge=T.rootAge(), lambdaRates=speciation, lambdaTimes=interval_times, muRates=extinction, muTimes=interval_times, rho=rho, samplingStrategy="uniform", condition="survival", taxa=taxa)

### clamp the model with the "observed" tree
timetree.clamp(T)



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rho)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnFile(filename="output/primates_EBD_PEP.log",printgen=1, separator = TAB, num_events) )
monitors.append( mnFile(filename="output/primates_EBD_PEP_speciation_rates.log",printgen=1, separator = TAB, speciation) )
monitors.append( mnFile(filename="output/primates_EBD_PEP_speciation_times.log",printgen=1, separator = TAB, interval_times) )
monitors.append( mnFile(filename="output/primates_EBD_PEP_extinction_rates.log",printgen=1, separator = TAB, extinction) )
monitors.append( mnFile(filename="output/primates_EBD_PEP_extinction_times.log",printgen=1, separator = TAB, interval_times) )
monitors.append( mnScreen(printgen=1000, num_events) )



################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=4, combine="mixed")

### run the MCMC ###
mymcmc.run(generations=50000, tuningInterval=200)

mymcmc.operatorSummary()


## quit ##
q()
