################################################################################
#
# RevBayes Example: Bayesian inference of phylogeny using a general time reversible model
#                   with gamma distributed rate variation among sites. We use
#                   a piecewise constant coalescent process as the prior distribution
#                   on trees. All branches are assumed to share a global clock.
#                   We use a known clock rate as the calibration.
# 
#
# authors: Sebastian Hoehna
#
################################################################################



#######################
# Reading in the Data #
#######################

data = readDiscreteCharacterData("data/california_seelions_12S_16S.nex")
data = readDiscreteCharacterData("data/california_seelions_cr.nex")

# Get some useful variables from the data. We need these later on.
n_species <- data.ntaxa()
n_branches <- 2 * n_species - 3
taxa <- data.taxa()

# initialize the moves and monitors vectors
moves = VectorMoves()
monitors = VectorMonitors()

H <- 0.587405



##############
# Tree model #
##############

NUM_INTERVALS = ceil(n_species / 5)

for (i in 1:NUM_INTERVALS) {

    pop_size[i] ~ dnUniform(0,1E6)
    moves.append( mvScale(pop_size[i], lambda=0.1, tune=true, weight=2.0) )

}

### the time tree is a stochastic node modeled by the constant-rate coalescent process (dnCoalescent)
psi ~ dnCoalescentSkyline(theta=pop_size, method="events", taxa=taxa)

interval_times := psi.getIntervalAges()


root_height := psi.rootAge()


### add some moves that change the tree
moves.append( mvNarrow(psi, weight=n_species) )
moves.append( mvNNI(psi, weight=n_species/5.0) )
moves.append( mvFNPR(psi, weight=n_species/5.0) )
moves.append( mvGPR(psi, weight=n_species/50.0) )
moves.append( mvSubtreeScale(psi, weight=n_species/5.0) )
moves.append( mvNodeTimeSlideUniform(psi, weight=n_species) )
moves.append( mvRootTimeScaleBactrian(psi, weight=3.0) )
moves.append( mvTreeScale(psi, weight=3.0) )

#mv_up_down = mvUpDownScale()
#mv_up_down.addVariable( psi, up=TRUE )
#mv_up_down.addVariable( pop_size, up=TRUE )
#moves.append( mv_up_down )


###########################
#   Substitution Model    #
###########################
  
# exchangeability rates for partition i
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves.append( mvBetaSimplex(er, alpha=10, tune=true, weight=3) )
moves.append( mvDirichletSimplex(er, alpha=10, tune=true, weight=1) )

# stationary frequencies for partition i
pi_prior <- v(1,1,1,1)
pi ~ dnDirichlet(pi_prior)
moves.append( mvBetaSimplex(pi, alpha=10, tune=true, weight=2) )
moves.append( mvDirichletSimplex(pi, alpha=10, tune=true, weight=1) )

# rate matrix for partition i
Q := fnGTR(er,pi) 

# +Gamma for partition i
#alpha ~ dnUniform( 0, 1E6 )
#alpha.setValue( 2.0 )
#gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false )

# add moves for the alpha parameter
#moves.append( mvScale(alpha,weight=2) )

# the probability of a site being invariable
p_invar ~ dnBeta(1,1)
moves.append( mvBetaProbability(p_invar, tune=true, weight=1.0) )


##############################
# Partition rate multipliers #
##############################

clock_rate <- 2.745E-8



###################
# PhyloCTMC Model #
###################

#phyloSeq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=clock_rate, siteRates=gamma_rates, type="DNA")
#phyloSeq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=clock_rate, siteRates=gamma_rates, pInv=p_invar, type="DNA")
phyloSeq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=clock_rate, pInv=p_invar, type="DNA")
phyloSeq.clamp(data)



############
# Analysis #
############

mymodel = model(psi)

# add monitors
monitors.append( mnModel(filename="output/california_seelions_skyline.log",printgen=1) )
monitors.append( mnFile(psi, filename="output/california_seelions_skyline.trees", printgen=1) )
monitors.append( mnFile(pop_size, filename="output/california_seelions_skyline_NEs.log", printgen=1) )
monitors.append( mnFile(interval_times, filename="output/california_seelions_skyline_times.log", printgen=1) )
monitors.append( mnScreen(pop_size, root_height, printgen=100) )

# run the analysis
mymcmc = mcmc(mymodel, moves, monitors, nruns=2, combine="mixed")
mymcmc.run(2500, tuning=100)


mymcmc.operatorSummary()

# you may want to quit RevBayes now
q()

